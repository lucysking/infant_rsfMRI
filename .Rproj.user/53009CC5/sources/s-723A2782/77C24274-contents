---
title: "Tidy infant rs-fMRI data"
author: "Lucy King"
date: "2/3/2020"
output: html_document
---

# Environment setup 
```{r}
library(tidyverse)
library(psych)
```

```{r}
results <- "~/Box/lucy_king_files/BABIES/rsfMRI/data/language/correlation_matrix/"
dirs <- grep("[0-9]$", list.dirs(results, recursive = FALSE), value = TRUE)

files <-
  tibble(
    path = 
      list.files(
        path = dirs,
        pattern = "correlation_matrix.csv",
        full.names = TRUE,
        no.. = TRUE
      )
  ) 
```

# Read in individual-level data 
```{r}
rs_matrix <- 
  files %>% 
  mutate(
    data = map(
      path,
      read_csv
    )
  ) %>% 
  unnest(data) %>% 
  mutate(
    ID = as.numeric(str_extract(path, "\\d{4}"))
  ) %>% 
  select(
    ID,
    everything(),
    -path
  ) 
```


```{r}
rs <- 
  rs_matrix %>% 
  gather(key, value, `left temporal pole`:`left_front_operc`) %>% 
  arrange(ID) %>% 
  mutate(
    region_name = recode(
      region_name,
      "left temporal pole" = "TP",
      "left STS" = "STS",
      "right TPJ" = "rTPJ",
      "left TPJ" = "lTPJ",
      "left IFG (opercularis)" = "IFGop",
      "left IFG (triangularis)" = "IFGtr",
      "left IFG (orbitalis)" = "IFGor",
      "left_aud_cortex" = "aud",
      "left_front_operc" = "foperc"
    ),
    key = recode(
      key,
      "left temporal pole" = "TP",
      "left STS" = "STS",
      "right TPJ" = "rTPJ",
      "left TPJ" = "lTPJ",
      "left IFG (opercularis)" = "IFGop",
      "left IFG (triangularis)" = "IFGtr",
      "left IFG (orbitalis)" = "IFGor",
      "left_aud_cortex" = "aud",
      "left_front_operc" = "foperc"
    )
  ) %>% 
  unite("key", region_name, key, sep = "_") %>% 
  filter(value != 1) %>% 
  spread(key, value) %>% 
  select(
    ID,
    aud_foperc:aud_TP,
    foperc_IFGop:foperc_TP,
    IFGop_IFGor:IFGop_TP,
    IFGor_IFGtr:IFGor_TP,
    IFGtr_lTPJ:IFGtr_TP,
    lTPJ_rTPJ:lTPJ_TP,
    rTPJ_STS:rTPJ_TP,
    STS_TP
  ) %>% 
  # threshold correlations at .1 and .05
  mutate_at(
    vars(-ID),
    funs(
      ".1" =
      if_else(abs(.) < .1, NA_real_, .)
    )
  ) %>% 
  mutate_at(
    vars(aud_foperc:STS_TP),
    funs(
      ".05" =
      if_else(abs(.) < .05, NA_real_, .)
    )
  )

```

# Compute coherence

Overall network:
left temporal pole
left STS
right TPJ
left TPJ
left IFG (opercularis)
left IFG (triangularis)
left IFG (orbitalis)
left_aud_cortex
left_front_operc

Subnetwork 1 (frontal/top-down):
left temporal pole
left IFG (opercularis)
left IFG (triangularis)
left IFG (orbitalis)
left_front_operc

Subnetwork 2 (temporal/bottom-up):
left STS
right TPJ
left TPJ
left_aud_cortex

### Select variables
```{r}
# no threshold__________________________________________________________________
all_rois <-
  rs %>% 
  select(aud_foperc:STS_TP) %>% 
  names()

front_rois <-
  rs %>% 
  select(
    IFGop_IFGor,
    IFGop_IFGtr,
    IFGor_IFGtr,
    IFGop_TP,
    IFGor_TP,
    IFGtr_TP,
    foperc_IFGop,
    foperc_IFGor,
    foperc_IFGtr,
    foperc_TP
  ) %>% 
  names()

temp_rois <-
  rs %>% 
  select(
    rTPJ_STS,
    lTPJ_STS,
    lTPJ_rTPJ,
    aud_lTPJ,
    aud_rTPJ,
    aud_STS
  ) %>% 
  names()

# .1 threshold__________________________________________________________________
all_rois.1 <-
  rs %>% 
  select(contains(".1")) %>% 
  names()

front_rois.1 <-
  rs %>% 
  select(
    IFGop_IFGor_.1,
    IFGop_IFGtr_.1,
    IFGor_IFGtr_.1,
    IFGop_TP_.1,
    IFGor_TP_.1,
    IFGtr_TP_.1,
    foperc_IFGop_.1,
    foperc_IFGor_.1,
    foperc_IFGtr_.1,
    foperc_TP_.1
  ) %>% 
  names()

temp_rois.1 <-
  rs %>% 
  select(
    rTPJ_STS_.1,
    lTPJ_STS_.1,
    lTPJ_rTPJ_.1,
    aud_lTPJ_.1,
    aud_rTPJ_.1,
    aud_STS_.1
  ) %>% 
  names()

# .05 threshold_________________________________________________________________
all_rois.05 <-
  rs %>% 
  select(contains(".05")) %>% 
  names()

front_rois.05 <-
  rs %>% 
  select(
    IFGop_IFGor_.05,
    IFGop_IFGtr_.05,
    IFGor_IFGtr_.05,
    IFGop_TP_.05,
    IFGor_TP_.05,
    IFGtr_TP_.05,
    foperc_IFGop_.05,
    foperc_IFGor_.05,
    foperc_IFGtr_.05,
    foperc_TP_.05
  ) %>% 
  names()

temp_rois.05 <-
  rs %>% 
  select(
    rTPJ_STS_.05,
    lTPJ_STS_.05,
    lTPJ_rTPJ_.05,
    aud_lTPJ_.05,
    aud_rTPJ_.05,
    aud_STS_.05
  ) %>% 
  names()

```

## Compute
```{r}
rs <- 
  rs %>% 
  mutate(
    # no threshold
    av_coherence_p = 
      pmap_dbl(
        select(., all_rois),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    av_coherence_z = fisherz(av_coherence_p),
    front_coherence_p = 
      pmap_dbl(
        select(., front_rois),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    front_coherence_z = fisherz(front_coherence_p),
    temp_coherence_p = 
      pmap_dbl(
        select(., temp_rois),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    temp_coherence_z = fisherz(temp_coherence_p),
    # .1 threshold
    av_coherence_p.1 = 
      pmap_dbl(
        select(., all_rois.1),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    av_coherence_z.1 = fisherz(av_coherence_p.1),
    front_coherence_p.1 = 
      pmap_dbl(
        select(., front_rois.1),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    front_coherence_z.1 = fisherz(front_coherence_p.1),
    temp_coherence_p.1 = 
      pmap_dbl(
        select(., temp_rois.1),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    temp_coherence_z.1 = fisherz(temp_coherence_p.1),
     # .05 threshold
    av_coherence_p.05 = 
      pmap_dbl(
        select(., all_rois.05),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    av_coherence_z.05 = fisherz(av_coherence_p.05),
    front_coherence_p.05 = 
      pmap_dbl(
        select(., front_rois.05),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    front_coherence_z.05 = fisherz(front_coherence_p.1),
    temp_coherence_p.05 = 
      pmap_dbl(
        select(., temp_rois.05),
        function(...) mean(c(...), na.rm = TRUE)
    ),
    temp_coherence_z.05 = fisherz(temp_coherence_p.05)
  ) 
```

# Histograms
```{r}
rs %>% 
  ggplot(aes(av_coherence_z)) +
  geom_histogram()

rs %>% 
  ggplot(aes(front_coherence_z)) +
  geom_histogram()

rs %>% 
  ggplot(aes(temp_coherence_z)) +
  geom_histogram()
```

```{r}
rs %>% 
  ggplot(aes(av_coherence_z.1)) +
  geom_histogram()

rs %>% 
  ggplot(aes(front_coherence_z.1)) +
  geom_histogram()

rs %>% 
  ggplot(aes(temp_coherence_z.1)) +
  geom_histogram()
```

```{r}
rs %>% 
  ggplot(aes(av_coherence_z.05)) +
  geom_histogram()

rs %>% 
  ggplot(aes(front_coherence_z.05)) +
  geom_histogram()

rs %>% 
  ggplot(aes(temp_coherence_z.05)) +
  geom_histogram()
```

```{r}
# remove outlier
rs %>% 
  filter(front_coherence_z > .6)

rs <-
  rs %>% 
  filter(ID != 115)
```

```{r}
write_csv(rs, "~/Box/lucy_king_files/BABIES/rsfMRI/data/language/coherence_tidy_20200203.csv")
```

